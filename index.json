{
  "api/Cmpnnt.Pia.Ctl.Enums.Command.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Enums.Command.html",
    "title": "Enum Command | PIA Sharp",
    "keywords": "Enum Command Namespace Cmpnnt.Pia.Ctl.Enums Assembly Cmpnnt.Pia.Ctl.dll Represents \"top-level\" piactl commands such as getters, setters, monitoring and connection commands. public enum Command Extension Methods CommandExtensions.ToStringF(Command) Fields Background = 1 Connect = 2 DedicatedIp = 3 Disconnect = 4 Get = 5 Login = 6 Logout = 7 Monitor = 8 None = 0 ResetSettings = 9 Set = 10"
  },
  "api/Cmpnnt.Pia.Ctl.Enums.DaemonAction.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Enums.DaemonAction.html",
    "title": "Enum DaemonAction | PIA Sharp",
    "keywords": "Enum DaemonAction Namespace Cmpnnt.Pia.Ctl.Enums Assembly Cmpnnt.Pia.Ctl.dll Represents \"sub-commands\" available as getters, setters and monitoring commands. Note that not all DaemonActions are available for every Command. public enum DaemonAction Extension Methods DaemonActionExtensions.ToStringF(DaemonAction) Fields AllowLan = 1 ConnectionState = 2 DebugLogging = 3 None = 0 PortForward = 4 Protocol = 5 PubIp = 6 Region = 7 Regions = 8 RequestPortForward = 9 VpnIp = 10"
  },
  "api/Cmpnnt.Pia.Ctl.Enums.Status.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Enums.Status.html",
    "title": "Enum Status | PIA Sharp",
    "keywords": "Enum Status Namespace Cmpnnt.Pia.Ctl.Enums Assembly Cmpnnt.Pia.Ctl.dll Represents the final status of a piactl command. public enum Status Extension Methods StatusExtensions.ToStringF(Status) Fields Canceled = 3 Completed = 2 Error = 4 NotStarted = 1 Started = 0"
  },
  "api/Cmpnnt.Pia.Ctl.Enums.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Enums.html",
    "title": "Namespace Cmpnnt.Pia.Ctl.Enums | PIA Sharp",
    "keywords": "Namespace Cmpnnt.Pia.Ctl.Enums Enums Command Represents \"top-level\" piactl commands such as getters, setters, monitoring and connection commands. DaemonAction Represents \"sub-commands\" available as getters, setters and monitoring commands. Note that not all DaemonActions are available for every Command. Status Represents the final status of a piactl command."
  },
  "api/Cmpnnt.Pia.Ctl.Extensions.CommandExtensions.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Extensions.CommandExtensions.html",
    "title": "Class CommandExtensions | PIA Sharp",
    "keywords": "Class CommandExtensions Namespace Cmpnnt.Pia.Ctl.Extensions Assembly Cmpnnt.Pia.Ctl.dll public static class CommandExtensions Inheritance object CommandExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToStringF(Command) A more efficient version of ToString() for enums. public static string ToStringF(this Command command) Parameters command Command A Command enum value Returns string A lowercase version of the name of the enum. Exceptions ArgumentException"
  },
  "api/Cmpnnt.Pia.Ctl.Extensions.DaemonActionExtensions.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Extensions.DaemonActionExtensions.html",
    "title": "Class DaemonActionExtensions | PIA Sharp",
    "keywords": "Class DaemonActionExtensions Namespace Cmpnnt.Pia.Ctl.Extensions Assembly Cmpnnt.Pia.Ctl.dll public static class DaemonActionExtensions Inheritance object DaemonActionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToStringF(DaemonAction) A more efficient version of ToString() for enums. public static string ToStringF(this DaemonAction action) Parameters action DaemonAction A DaemonAction value Returns string A lowercase version of the name of the enum. Exceptions ArgumentException"
  },
  "api/Cmpnnt.Pia.Ctl.Extensions.StatusExtensions.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Extensions.StatusExtensions.html",
    "title": "Class StatusExtensions | PIA Sharp",
    "keywords": "Class StatusExtensions Namespace Cmpnnt.Pia.Ctl.Extensions Assembly Cmpnnt.Pia.Ctl.dll public static class StatusExtensions Inheritance object StatusExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToStringF(Status) A more efficient version of ToString() for enums. public static string ToStringF(this Status status) Parameters status Status A Status value Returns string A lowercase version of the name of the enum. Exceptions ArgumentException"
  },
  "api/Cmpnnt.Pia.Ctl.Extensions.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Extensions.html",
    "title": "Namespace Cmpnnt.Pia.Ctl.Extensions | PIA Sharp",
    "keywords": "Namespace Cmpnnt.Pia.Ctl.Extensions Classes CommandExtensions DaemonActionExtensions StatusExtensions"
  },
  "api/Cmpnnt.Pia.Ctl.Lib.CommandLineWrapper.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.CommandLineWrapper.html",
    "title": "Class CommandLineWrapper | PIA Sharp",
    "keywords": "Class CommandLineWrapper Namespace Cmpnnt.Pia.Ctl.Lib Assembly Cmpnnt.Pia.Ctl.dll Wraps the system console, invokes the piactl executable and captures the output. public class CommandLineWrapper : ICommandLineWrapper Inheritance object CommandLineWrapper Implements ICommandLineWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(string, PiaCtlOptions, CancellationToken) Invokes piactl with the specified command. Conforms to ExecuteDelegate public Task<PiaResults> Execute(string command, PiaCtlOptions options, CancellationToken ct = default) Parameters command string The CLI command to be passed to piactl options PiaCtlOptions The options to configure PiaCtl. ct CancellationToken A cancellation token. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. ExecuteTimed(uint, string, PiaCtlOptions) Invokes piactl with the specified command and keeps the it running for a given time. Unless the command errors, this method will return success when the timeout expires. Conforms to ExecuteTimedDelegate public Task<PiaResults> ExecuteTimed(uint timeout, string command, PiaCtlOptions options) Parameters timeout uint The time, in seconds, after which to cancel the task command string The CLI command to be passed to piactl options PiaCtlOptions The options to configure PiaCtl. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results."
  },
  "api/Cmpnnt.Pia.Ctl.Lib.CommandRunner.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.CommandRunner.html",
    "title": "Class CommandRunner | PIA Sharp",
    "keywords": "Class CommandRunner Namespace Cmpnnt.Pia.Ctl.Lib Assembly Cmpnnt.Pia.Ctl.dll Formats and executes a piactl command line command. public class CommandRunner : ICommandRunner Inheritance object CommandRunner Implements ICommandRunner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Run(ExecuteDelegate, Command, DaemonAction, PiaCtlOptions, bool) Formats and executes a piactl command line command. public Task<PiaResults> Run(ExecuteDelegate execute, Command command, DaemonAction action, PiaCtlOptions options, bool debug = false) Parameters execute ExecuteDelegate A delegate representing the process call to execute the piactl command line utility command Command A Command enum value representing a top-level piactl command. action DaemonAction A DaemonAction enum value representing a specific action to be taken by the PIA daemon. options PiaCtlOptions A PiaCtlOptions instance. debug bool Print debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Run(ExecuteDelegate, Command, DaemonAction, bool, PiaCtlOptions, bool) Formats and executes a piactl command line command. public Task<PiaResults> Run(ExecuteDelegate execute, Command command, DaemonAction action, bool argument, PiaCtlOptions options, bool debug = false) Parameters execute ExecuteDelegate A delegate representing the process call to execute the piactl command line utility command Command A Command enum value representing a top-level piactl command. action DaemonAction A DaemonAction enum value representing a specific action to be taken by the PIA daemon. argument bool A bool argument to be passed to the piactl daemon. options PiaCtlOptions A PiaCtlOptions instance. debug bool Print debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Run(ExecuteDelegate, Command, DaemonAction, string, PiaCtlOptions, bool) Formats and executes a piactl command line command. public Task<PiaResults> Run(ExecuteDelegate execute, Command command, DaemonAction action, string argument, PiaCtlOptions options, bool debug = false) Parameters execute ExecuteDelegate A delegate representing the process call to execute the piactl command line utility command Command A Command enum value representing a top-level piactl command. action DaemonAction A DaemonAction enum value representing a specific action to be taken by the PIA daemon. argument string A string argument to be passed to the piactl daemon. options PiaCtlOptions A PiaCtlOptions instance. debug bool Print debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Run(ExecuteDelegate, Command, DaemonAction, string, string, PiaCtlOptions, bool) Formats and executes a piactl command line command. public Task<PiaResults> Run(ExecuteDelegate execute, Command command, DaemonAction action, string argument1, string argument2, PiaCtlOptions options, bool debug = false) Parameters execute ExecuteDelegate A delegate representing the process call to execute the piactl command line utility command Command A Command enum value representing a top-level piactl command. action DaemonAction A DaemonAction enum value representing a specific action to be taken by the PIA daemon. argument1 string A string argument to be passed to the piactl daemon. argument2 string A string argument to be passed to the piactl daemon. options PiaCtlOptions A PiaCtlOptions instance. debug bool Print debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Run(ExecuteTimedDelegate, Command, DaemonAction, uint, PiaCtlOptions, bool) Formats and executes a piactl command line command. public Task<PiaResults> Run(ExecuteTimedDelegate execute, Command command, DaemonAction action, uint argument, PiaCtlOptions options, bool debug = false) Parameters execute ExecuteTimedDelegate A delegate representing the process call to execute the piactl command line utility command Command A Command enum value representing a top-level piactl command. action DaemonAction A DaemonAction enum value representing a specific action to be taken by the PIA daemon. argument uint A uint argument to be passed to the Command Line Wrapper options PiaCtlOptions A PiaCtlOptions instance. debug bool Print debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results."
  },
  "api/Cmpnnt.Pia.Ctl.Lib.ExecuteDelegate.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.ExecuteDelegate.html",
    "title": "Delegate ExecuteDelegate | PIA Sharp",
    "keywords": "Delegate ExecuteDelegate Namespace Cmpnnt.Pia.Ctl.Lib Assembly Cmpnnt.Pia.Ctl.dll A delegate representing a non-timed operation to be executed by the CommandRunner public delegate Task<PiaResults> ExecuteDelegate(string command, PiaCtlOptions options, CancellationToken ct = default) Parameters command string The CLI command to be passed to the piactl binary options PiaCtlOptions The options to configure PiaCtl. ct CancellationToken A cancellation token. Returns Task<PiaResults> A delegate representing a non-timed operation to be executed by the"
  },
  "api/Cmpnnt.Pia.Ctl.Lib.ExecuteTimedDelegate.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.ExecuteTimedDelegate.html",
    "title": "Delegate ExecuteTimedDelegate | PIA Sharp",
    "keywords": "Delegate ExecuteTimedDelegate Namespace Cmpnnt.Pia.Ctl.Lib Assembly Cmpnnt.Pia.Ctl.dll A delegate representing a timed operation to be executed by the CommandRunner public delegate Task<PiaResults> ExecuteTimedDelegate(uint timeout, string command, PiaCtlOptions options) Parameters timeout uint The time, in seconds, after which to cancel the task command string The CLI command to be passed to the piactl binary options PiaCtlOptions The options to configure PiaCtl. Returns Task<PiaResults> A delegate representing a timed operation to be executed by the"
  },
  "api/Cmpnnt.Pia.Ctl.Lib.ICommandLineWrapper.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.ICommandLineWrapper.html",
    "title": "Interface ICommandLineWrapper | PIA Sharp",
    "keywords": "Interface ICommandLineWrapper Namespace Cmpnnt.Pia.Ctl.Lib Assembly Cmpnnt.Pia.Ctl.dll public interface ICommandLineWrapper Methods Execute(string, PiaCtlOptions, CancellationToken) Invokes piactl with the specified command. Conforms to ExecuteDelegate Task<PiaResults> Execute(string command, PiaCtlOptions options, CancellationToken ct = default) Parameters command string The CLI command to be passed to piactl. options PiaCtlOptions The options to configure PiaCtl. ct CancellationToken A cancellation token. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. ExecuteTimed(uint, string, PiaCtlOptions) Invokes piactl with the specified command and keeps the it running for a given time. Unless the command errors, this method will return success when the timeout expires. Conforms to ExecuteTimedDelegate Task<PiaResults> ExecuteTimed(uint timeout, string command, PiaCtlOptions options) Parameters timeout uint The time, in seconds, after which to cancel the task. command string The CLI command to be passed to piactl. options PiaCtlOptions The options to configure PiaCtl. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results."
  },
  "api/Cmpnnt.Pia.Ctl.Lib.ICommandRunner.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.ICommandRunner.html",
    "title": "Interface ICommandRunner | PIA Sharp",
    "keywords": "Interface ICommandRunner Namespace Cmpnnt.Pia.Ctl.Lib Assembly Cmpnnt.Pia.Ctl.dll public interface ICommandRunner Methods Run(ExecuteDelegate, Command, DaemonAction, PiaCtlOptions, bool) Formats and executes a piactl command line command. Task<PiaResults> Run(ExecuteDelegate execute, Command command, DaemonAction action, PiaCtlOptions options, bool debug = false) Parameters execute ExecuteDelegate A delegate representing the process call to execute the piactl command line utility command Command A Command enum value representing a top-level piactl command. action DaemonAction A DaemonAction enum value representing a specific action to be taken by the PIA daemon. options PiaCtlOptions A PiaCtlOptions instance. debug bool Print debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Run(ExecuteDelegate, Command, DaemonAction, bool, PiaCtlOptions, bool) Formats and executes a piactl command line command. Task<PiaResults> Run(ExecuteDelegate execute, Command command, DaemonAction action, bool argument, PiaCtlOptions options, bool debug = false) Parameters execute ExecuteDelegate A delegate representing the process call to execute the piactl command line utility command Command A Command enum value representing a top-level piactl command. action DaemonAction A DaemonAction enum value representing a specific action to be taken by the PIA daemon. argument bool A bool argument to be passed to the piactl daemon. options PiaCtlOptions The options to configure PiaCtl. debug bool Print debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Run(ExecuteDelegate, Command, DaemonAction, string, PiaCtlOptions, bool) Formats and executes a piactl command line command. Task<PiaResults> Run(ExecuteDelegate execute, Command command, DaemonAction action, string argument, PiaCtlOptions options, bool debug = false) Parameters execute ExecuteDelegate A delegate representing the process call to execute the piactl command line utility command Command A Command enum value representing a top-level piactl command. action DaemonAction A DaemonAction enum value representing a specific action to be taken by the PIA daemon. argument string A string argument to be passed to the piactl daemon. options PiaCtlOptions The options to configure PiaCtl. debug bool Print debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Run(ExecuteDelegate, Command, DaemonAction, string, string, PiaCtlOptions, bool) Formats and executes a piactl command line command. Task<PiaResults> Run(ExecuteDelegate execute, Command command, DaemonAction action, string argument1, string argument2, PiaCtlOptions options, bool debug = false) Parameters execute ExecuteDelegate A delegate representing the process call to execute the piactl command line utility command Command A Command enum value representing a top-level piactl command. action DaemonAction A DaemonAction enum value representing a specific action to be taken by the PIA daemon. argument1 string A string argument to be passed to the piactl daemon. argument2 string A string argument to be passed to the piactl daemon. options PiaCtlOptions The options to configure PiaCtl. debug bool Print debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Run(ExecuteTimedDelegate, Command, DaemonAction, uint, PiaCtlOptions, bool) Formats and executes a piactl command line command. Task<PiaResults> Run(ExecuteTimedDelegate execute, Command command, DaemonAction action, uint argument, PiaCtlOptions options, bool debug = false) Parameters execute ExecuteTimedDelegate A delegate representing the process call to execute the piactl command line utility command Command A Command enum value representing a top-level piactl command. action DaemonAction A DaemonAction enum value representing a specific action to be taken by the PIA daemon. argument uint A uint argument to be passed to the Command Line Wrapper options PiaCtlOptions The options to configure PiaCtl. debug bool Print debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results."
  },
  "api/Cmpnnt.Pia.Ctl.Lib.PiaEnvironment.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.PiaEnvironment.html",
    "title": "Class PiaEnvironment | PIA Sharp",
    "keywords": "Class PiaEnvironment Namespace Cmpnnt.Pia.Ctl.Lib Assembly Cmpnnt.Pia.Ctl.dll Utilities related to the execution environment of the piactl binary. public static class PiaEnvironment Inheritance object PiaEnvironment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PiaPath Returns a default path to the piactl binary based on the current operation system public static string PiaPath { get; } Property Value string Exceptions ArgumentException Thrown if running in an operating system other than Windows, Linux or MacOs"
  },
  "api/Cmpnnt.Pia.Ctl.Lib.Results.ICliResults.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.Results.ICliResults.html",
    "title": "Interface ICliResults | PIA Sharp",
    "keywords": "Interface ICliResults Namespace Cmpnnt.Pia.Ctl.Lib.Results Assembly Cmpnnt.Pia.Ctl.dll public interface ICliResults Properties StandardErrorResults List<string> StandardErrorResults { get; set; } Property Value List<string> StandardOutputResults List<string> StandardOutputResults { get; set; } Property Value List<string> Status Status Status { get; set; } Property Value Status"
  },
  "api/Cmpnnt.Pia.Ctl.Lib.Results.PiaResults.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.Results.PiaResults.html",
    "title": "Class PiaResults | PIA Sharp",
    "keywords": "Class PiaResults Namespace Cmpnnt.Pia.Ctl.Lib.Results Assembly Cmpnnt.Pia.Ctl.dll Contains standard out, standard error and the status of the operation. public record PiaResults : ICliResults, IEquatable<PiaResults> Inheritance object PiaResults Implements ICliResults IEquatable<PiaResults> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties StandardErrorResults Represents the standard error results. public List<string> StandardErrorResults { get; set; } Property Value List<string> StandardOutputResults Represents the standard output results. public List<string> StandardOutputResults { get; set; } Property Value List<string> Status Represents the status of the completed PIA command. [JsonConverter(typeof(JsonStringEnumConverter<Status>))] public Status Status { get; set; } Property Value Status Methods ToString() Returns a JSON-formatted string containing the StandardOutputResults, StandardErrorResults and Status public override string ToString() Returns string"
  },
  "api/Cmpnnt.Pia.Ctl.Lib.Results.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.Results.html",
    "title": "Namespace Cmpnnt.Pia.Ctl.Lib.Results | PIA Sharp",
    "keywords": "Namespace Cmpnnt.Pia.Ctl.Lib.Results Classes PiaResults Contains standard out, standard error and the status of the operation. Interfaces ICliResults"
  },
  "api/Cmpnnt.Pia.Ctl.Lib.html": {
    "href": "api/Cmpnnt.Pia.Ctl.Lib.html",
    "title": "Namespace Cmpnnt.Pia.Ctl.Lib | PIA Sharp",
    "keywords": "Namespace Cmpnnt.Pia.Ctl.Lib Classes CommandLineWrapper Wraps the system console, invokes the piactl executable and captures the output. CommandRunner Formats and executes a piactl command line command. PiaEnvironment Utilities related to the execution environment of the piactl binary. Interfaces ICommandLineWrapper ICommandRunner Delegates ExecuteDelegate A delegate representing a non-timed operation to be executed by the CommandRunner ExecuteTimedDelegate A delegate representing a timed operation to be executed by the CommandRunner"
  },
  "api/Cmpnnt.Pia.Ctl.PiaCtl.html": {
    "href": "api/Cmpnnt.Pia.Ctl.PiaCtl.html",
    "title": "Class PiaCtl | PIA Sharp",
    "keywords": "Class PiaCtl Namespace Cmpnnt.Pia.Ctl Assembly Cmpnnt.Pia.Ctl.dll A convenience class to call the commands available in the piactl command line application. The methods are all asynchronous despite not using the async suffix. public class PiaCtl Inheritance object PiaCtl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PiaCtl() The default constructor. public PiaCtl() PiaCtl(ICommandLineWrapper) Allows a CommandLineWrapper implementation to be set during construction. public PiaCtl(ICommandLineWrapper commandLineWrapper) Parameters commandLineWrapper ICommandLineWrapper PiaCtl(PiaCtlOptions) Allows options to be set during construction. public PiaCtl(PiaCtlOptions piaCtlOptions) Parameters piaCtlOptions PiaCtlOptions PiaCtl(PiaCtlOptions, ICommandLineWrapper) Allows options and a a CommandLineWrapper implementation to be set during construction. public PiaCtl(PiaCtlOptions piaCtlOptions, ICommandLineWrapper commandLineWrapper) Parameters piaCtlOptions PiaCtlOptions The options to configure commandLineWrapper ICommandLineWrapper A wrapper around the system's command line interface. The methods defined in this interface match ExecuteDelegate and ExecuteTimedDelegate Methods AddDedicatedIp(string, bool) Adds a dedicated IP address to your VPN. The dedicated IP token must be in a text file by itself. This is an async method. public Task<PiaResults> AddDedicatedIp(string tokenFilePath, bool debug = false) Parameters tokenFilePath string The path to the text file containing your dedicated IP token. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. BackgroundDisable(bool) Foregrounds a backgrounded PIA daemon. This is an async method. public Task<PiaResults> BackgroundDisable(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. BackgroundEnable(bool) Allow the killswitch and/or VPN connection to remain active in the background when the GUI client is not running. When enabled, the PIA daemon will stay active even if the GUI client is closed or has not been started. This allows Connection.Connect() to be used even if the GUI client is not running. Disabling background activation will disconnect the VPN and deactivate killswitch if the GUI client is not running. This is an async method. public Task<PiaResults> BackgroundEnable(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Connect(bool) Connects to the VPN, or reconnects to apply new settings. To use this command, the PIA GUI client must be running, or background mode must be enabled with piactl background enable. By default, the PIA daemon is inactive when the GUI client is not running. This is an async method. public Task<PiaResults> Connect(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Disconnect(bool) Disconnects from the VPN. This is an async method. public Task<PiaResults> Disconnect(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. GetAllowLan(bool) Gets whether allows LAN traffic. This is an async method. public Task<PiaResults> GetAllowLan(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. GetConnectionState(bool) Gets the current VPN connection state. This is an async method. public Task<PiaResults> GetConnectionState(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. GetDebugLogging(bool) Gets the current state of the debug logging setting. This is an async method. public Task<PiaResults> GetDebugLogging(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. GetPortForward(bool) Gets the forward port number, if available, or the status of the request to forward a port. This is an async method. public Task<PiaResults> GetPortForward(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. GetProtocol(bool) Gets the current VPN connection protocol. This is an async method. public Task<PiaResults> GetProtocol(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. GetPubIp(bool) Gets the current public IP address. This is an async method. public Task<PiaResults> GetPubIp(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. GetRegion(bool) Gets the currently selected region (or \"auto\"). This is an async method. public Task<PiaResults> GetRegion(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. GetRegions(bool) Lists all available regions. This is an async method. public Task<PiaResults> GetRegions(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. GetRequestPortForward(bool) Gets whether a forwarded port will be requested on the next connection attempt. This is an async method. public Task<PiaResults> GetRequestPortForward(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. GetVpnIp(bool) Gets the current VPN IP address. This is an async method. public Task<PiaResults> GetVpnIp(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Login(string, bool) Logs into Private Internet Access using a login file. This is an async method. public Task<PiaResults> Login(string loginFilePath, bool debug = false) Parameters loginFilePath string The path to the text file containing your login information as specified by piactl.exe --help. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. Logout(bool) Log out your PIA account on this computer. This is an async method. public Task<PiaResults> Logout(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. MonitorAllowLan(uint, bool) Monitors whether LAN traffic is being allowed. This is an async method. public Task<PiaResults> MonitorAllowLan(uint timeout, bool debug = false) Parameters timeout uint A (non-negative) integer number of seconds to run the monitor operation. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. MonitorConnectionState(uint, bool) Monitors the VPN connection state. This is an async method. public Task<PiaResults> MonitorConnectionState(uint timeout, bool debug = false) Parameters timeout uint A (non-negative) integer number of seconds to run the monitor operation. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. MonitorDebugLogging(uint, bool) Monitors the state of the debug logging setting. This is an async method. public Task<PiaResults> MonitorDebugLogging(uint timeout, bool debug = false) Parameters timeout uint A (non-negative) integer number of seconds to run the monitor operation. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. MonitorPortForward(uint, bool) Monitors the forwarded port number, if available, or the status of the request to forward a port. This is an async method. public Task<PiaResults> MonitorPortForward(uint timeout, bool debug = false) Parameters timeout uint A (non-negative) integer number of seconds to run the monitor operation. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. MonitorProtocol(uint, bool) Monitors the VPN connection protocol. This is an async method. public Task<PiaResults> MonitorProtocol(uint timeout, bool debug = false) Parameters timeout uint A (non-negative) integer number of seconds to run the monitor operation. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. MonitorPubIp(uint, bool) Monitors the public IP address. This is an async method. public Task<PiaResults> MonitorPubIp(uint timeout, bool debug = false) Parameters timeout uint A (non-negative) integer number of seconds to run the monitor operation. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. MonitorRegion(uint, bool) Monitors the currently selected region. This is an async method. public Task<PiaResults> MonitorRegion(uint timeout, bool debug = false) Parameters timeout uint A (non-negative) integer number of seconds to run the monitor operation. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. MonitorRequestPortForward(uint, bool) Monitors whether a forwarded port will be requested on the next connection attempt. This is an async method. public Task<PiaResults> MonitorRequestPortForward(uint timeout, bool debug = false) Parameters timeout uint A (non-negative) integer number of seconds to run the monitor operation. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. MonitorVpnIp(uint, bool) Monitors the VPN IP address. This is an async method. public Task<PiaResults> MonitorVpnIp(uint timeout, bool debug = false) Parameters timeout uint A (non-negative) integer number of seconds to run the monitor operation. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. RemoveDedicatedIp(string, bool) Removes a dedicated IP address from your VPN. This is an async method. public Task<PiaResults> RemoveDedicatedIp(string regionId, bool debug = false) Parameters regionId string The region associated with the dedicated IP as shown by the method GetRegions() or piactl.exe get regions debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. ResetSettings(bool) Resets daemon settings to the defaults (ports/protocols/etc). This affects the PIA daemon itself, not this instance of the CLI wrapper. This is an async method. public Task<PiaResults> ResetSettings(bool debug = false) Parameters debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. SetAllowLan(bool, bool) Sets whether to allow LAN traffic. This is an async method. public Task<PiaResults> SetAllowLan(bool value, bool debug = false) Parameters value bool Whether or not to allow LAN traffic. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. SetDebugLogging(bool, bool) Sets whether to enable or disable debug logging. This is an async method. public Task<PiaResults> SetDebugLogging(bool value, bool debug = false) Parameters value bool Whether or not to enable debug logging. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. SetProtocol(string, bool) Sets the VPN protocol. This is an async method. public Task<PiaResults> SetProtocol(string value, bool debug = false) Parameters value string The VPN protocol to use. Must be one of \"openvpn\" or \"wireguard\". debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. SetRegion(string, bool) Sets the VPN region. This is an async method. public Task<PiaResults> SetRegion(string value, bool debug = false) Parameters value string A valid region or \"auto\". Run the method GetRegions() for a list of regions. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results. SetRequestPortForward(bool, bool) Sets whether to request a forwarded port on the next connection attempt. This is an async method. public Task<PiaResults> SetRequestPortForward(bool value, bool debug = false) Parameters value bool Whether or not to request port forwarding. debug bool Prints debug logs to stderr. Returns Task<PiaResults> A Task<PiaResults> containing standard output and standard error results."
  },
  "api/Cmpnnt.Pia.Ctl.PiaCtlOptions.html": {
    "href": "api/Cmpnnt.Pia.Ctl.PiaCtlOptions.html",
    "title": "Class PiaCtlOptions | PIA Sharp",
    "keywords": "Class PiaCtlOptions Namespace Cmpnnt.Pia.Ctl Assembly Cmpnnt.Pia.Ctl.dll Allows configuration of PiaCtl public class PiaCtlOptions Inheritance object PiaCtlOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PiaPath public string PiaPath { get; set; } Property Value string"
  },
  "api/Cmpnnt.Pia.Ctl.html": {
    "href": "api/Cmpnnt.Pia.Ctl.html",
    "title": "Namespace Cmpnnt.Pia.Ctl | PIA Sharp",
    "keywords": "Namespace Cmpnnt.Pia.Ctl Classes PiaCtl A convenience class to call the commands available in the piactl command line application. The methods are all asynchronous despite not using the async suffix. PiaCtlOptions Allows configuration of PiaCtl"
  },
  "api/Cmpnnt.Pia.DependencyInjection.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Cmpnnt.Pia.DependencyInjection.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | PIA Sharp",
    "keywords": "Class ServiceCollectionExtensions Namespace Cmpnnt.Pia.DependencyInjection.Extensions Assembly Cmpnnt.Pia.DependencyInjection.dll public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddPiaCtl(IServiceCollection, Action<PiaCtlOptions>?) An IServiceCollection extension method that registers Cmpnnt.Pia.Ctl and PiaCtlOptions as singletons. public static IServiceCollection AddPiaCtl(this IServiceCollection services, Action<PiaCtlOptions>? configureOptions = null) Parameters services IServiceCollection configureOptions Action<PiaCtlOptions> Returns IServiceCollection"
  },
  "api/Cmpnnt.Pia.DependencyInjection.Extensions.html": {
    "href": "api/Cmpnnt.Pia.DependencyInjection.Extensions.html",
    "title": "Namespace Cmpnnt.Pia.DependencyInjection.Extensions | PIA Sharp",
    "keywords": "Namespace Cmpnnt.Pia.DependencyInjection.Extensions Classes ServiceCollectionExtensions"
  },
  "api/Cmpnnt.Pia.Examples.Program.html": {
    "href": "api/Cmpnnt.Pia.Examples.Program.html",
    "title": "Class Program | PIA Sharp",
    "keywords": "Class Program Namespace Cmpnnt.Pia.Examples Assembly Cmpnnt.Pia.Examples.dll An example program illustrating how to use dependency injection with Cmpnnt.Pia.Ctl in a command-line application. public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Cmpnnt.Pia.Examples.SomeClass.html": {
    "href": "api/Cmpnnt.Pia.Examples.SomeClass.html",
    "title": "Class SomeClass | PIA Sharp",
    "keywords": "Class SomeClass Namespace Cmpnnt.Pia.Examples Assembly Cmpnnt.Pia.Examples.dll An simple class used as a dummy service for the dependency injection example code. public class SomeClass Inheritance object SomeClass Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SomeClass(PiaCtl, ILogger<SomeClass>) public SomeClass(PiaCtl pia, ILogger<SomeClass> logger) Parameters pia PiaCtl logger ILogger<SomeClass> Methods Run() Executes a PIA command and logs the results. public Task Run() Returns Task"
  },
  "api/Cmpnnt.Pia.Examples.html": {
    "href": "api/Cmpnnt.Pia.Examples.html",
    "title": "Namespace Cmpnnt.Pia.Examples | PIA Sharp",
    "keywords": "Namespace Cmpnnt.Pia.Examples Classes Program An example program illustrating how to use dependency injection with Cmpnnt.Pia.Ctl in a command-line application. SomeClass An simple class used as a dummy service for the dependency injection example code."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PIA Sharp API Reference | PIA Sharp",
    "keywords": "PIA Sharp API Reference This section contains detailed information about the public classes, methods and enums found in Cmpnnt.Pia. Here's a quick rundown of the available methods exposed by Cmpnnt.Pia.Ctl, which are the core of this library. Full API documentation for them is available under Cmpnnt.Pia.Ctl.PiaCtl General Login Logout Connect Disconnect ResetSettings Dedicated IP AddDedicatedIp RemoveDedicatedIp Background BackgroundEnable BackgroundDisable Setters SetAllowLan SetDebugLogin SetProtocol SetRegion SetRequestPortForward Getters GetAllowLan GetConnectionState GetDebugLogging GetPortForward GetProtocol GetPubIp GetRegion GetRegions GetRequestPortForward GetVpnIp Monitoring MonitorAllowLan MonitorConnectionState MonitorDebugLogging MonitorPortForward MonitorProtocol MonitorPubIp MonitorRegion MonitorRequestPortForward MonitorVpnIp"
  },
  "articles/references.html": {
    "href": "articles/references.html",
    "title": "References | PIA Sharp",
    "keywords": "References Links to various articles and documentation referenced while building this project, in no particular order: https://keepachangelog.com/ https://semver.org/ https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection-usage https://learn.microsoft.com/en-us/dotnet/core/extensions/options-library-authors &\"C:\\Program Files\\Private Internet Access\\piactl.exe\" --help (PowerShell syntax) https://stackoverflow.com/questions/51180523/unit-testing-iservicecollection-registration https://dotnet.github.io/docfx/docs/basic-concepts.html https://github.com/coverlet-coverage/coverlet#Quick-Start https://github.com/marketplace/actions/code-coverage-summary https://learn.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli https://learn.microsoft.com/en-us/visualstudio/msbuild/property-functions?view=vs-2022#msbuild-property-functions https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/?tabs=net7 https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md"
  },
  "index.html": {
    "href": "index.html",
    "title": "PIA Sharp | PIA Sharp",
    "keywords": "PIA Sharp For basic installation instructions, see the main readme. Compatibility PIA Sharp's main package, Cmpnnt.Pia.Ctl, has been tested against version 3.3.1 on Windows and Linux (MacOS compatibility is on the roadmap). It provides access to every piactl command available in those version on those systems. It might also work on other versions of piactl, provided they expose the same commands with the same parameters. However, this hasn't been tested and nothing is guaranteed. Setup You must have a Private Internet Access account and the piactl command line application installed on your system. This is included with their desktop GUI application. There are two ways to use Cmpnnt.Pia.Ctl: Dependency Injection and simple instantiation Dependency Injection There's a separate dependency injection library you can use if you require DI. Add a reference to Cmpnnt.Pia.DependencyInjection and include it in your DI container by adding a call to services.AddPiaCtl() under ConfigureServices. Note Note: The dependency injection package registers PiaCtl as a singleton. Here's a basic example. You can find the runnable code in the examples project. using IHost host = Host.CreateDefaultBuilder(args) .ConfigureServices(services => { services.AddPiaCtl(); services.AddScoped<SomeClass>(); }) .ConfigureLogging(options => { options.ClearProviders(); options.AddConsole(); }) .Build(); Configuration You can also pass a lambda function to AddPiaCtl to configure the path to your system's piactl application, if it differs from the default. On Windows, the default location is C:\\Program Files\\Private Internet Access\\piactl.exe. using IHost host = Host.CreateDefaultBuilder(args) .ConfigureServices(services => { services.AddPiaCtl(options => { options.PiaPath = @\"C:\\path\\to\\piactl.exe\"; }); services.AddScoped<SomeClass>(); }) .ConfigureLogging(options => { options.ClearProviders(); options.AddConsole(); }) .Build(); Instantiation If you don't need DI, you can use the command-line wrapper by itself by including a reference to Cmpnnt.Pia.Ctl, available as a nuget package. PiaCtl pia = new PiaCtl(); PiaResults results = await pia.GetRegions(); Console.WriteLine(results); Usage Full API documentation is available in the API Reference. Commands TODO: Add link to developer documentation Cmpnnt.Pia.Ctl allows access to every command exposed by piactl. The methods are all asynchronous, but don't include the async suffix. The available commands are as follows. See the API reference for detailed developer documentation. Results (command line output) All PiaCtl commands return a Task<PiaResults>, which contains a Status enum indicating the result of the operation and a List<string> for each of stdout and stderr output. The ToString() method has been overridden to return a JSON-formatted string with that information (using source generation for the JSON serialization). Compiling Because Cmpnnt.Pia.Ctl is a .NET 7 Native AOT library, it requires additional tooling to compile. Windows On Windows, install Visual Studio 2022 with the Desktop Development for C++ workload. Linux On Linux, install the following packages, depending on your distribution: Ubuntu 18.04+ sudo apt-get install clang zlib1g-dev Alpine 3.15+ sudo apk add clang build-base zlib-dev MacOS To compile on MacOS, you'll need to install the latest Command Line Tools for XCode. References Links to various articles and documentation referenced while building this project can be found here"
  }
}