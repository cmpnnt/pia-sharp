name: "Publish to Nuget"

on:
  workflow_run:
    workflows:
      - "Update Changelog"
    types:
      - completed
permissions:
  packages: write
  contents: read
jobs:
  get_changelog_versions:
    runs-on: ubuntu-latest
    outputs:
      ctl-version-number: ${{ steps.get-ctl-version.outputs.version }}
      di-version-number: ${{ steps.get-di-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Cmpnnt.Pia.Ctl Version
        id: get-ctl-version
        env:
          regex: '##\s\[v([0-9\.]+)\]\s-\s[0-9]{4}-[0-9]{2}-[0-9]{2}'
        run: echo version=$(sed -nr "s/$regex/\1/p" Cmpnnt.Pia.Ctl/CHANGELOG.md | head -n1) >> $GITHUB_OUTPUT
      - name: Check ctl version number
        if: steps.get-ctl-version.outputs == ''
        run: echo "error parsing version number from ctl changelog"; exit 1
      - name: Get Cmpnnt.Pia.DependencyInjection Version
        id: get-di-version
        env:
          regex: '##\s\[v([0-9\.]+)\]\s-\s[0-9]{4}-[0-9]{2}-[0-9]{2}'
        run: echo version=$(sed -nr "s/$regex/\1/p" Cmpnnt.Pia.DependencyInjection/CHANGELOG.md | head -n1) >> $GITHUB_OUTPUT
      - name: Check di version number
        if: steps.get-di-version.outputs == ''
        run: echo "error parsing version number from ctl changelog"; exit 1
  get_published_packages_versions: # The version numbers are the same for all OSes, so only getting Linux here
    runs-on: ubuntu-latest
    outputs:
      ctl-package-version: ${{ steps.get-ctl-package-version.outputs.version }}
      di-package-version: ${{ steps.get-di-package-version.outputs.version }}
    steps:
      - name: Get Published Get Cmpnnt.Pia.Ctl Version
        id: get-ctl-package-version
        run: | 
          echo version=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.PACKAGES_PAT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/user/packages/nuget/cmpnnt.pia.ctl.linux/versions \
          | jq -r '.[0].name') >> $GITHUB_OUTPUT
      - name: Get Published Get Cmpnnt.Pia.DependencyInjection Version
        id: get-di-package-version # TODO: remove the OS from the package name in the url once the DI package uses the ctl metapackage
        run: |
          echo version=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.PACKAGES_PAT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/user/packages/nuget/cmpnnt.pia.dependencyinjection.linux/versions \
          | jq -r '.[0].name') >> $GITHUB_OUTPUT
  publish_ctl_package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    needs: [get_changelog_versions, get_published_packages_versions]
    if: needs.get_changelog_versions.outputs.ctl-version-number != needs.get_published_packages_versions.outputs.ctl-package-version
    steps:
      - uses: actions/checkout@v4
      - name: Add Github Nuget Source
        id: add-github-nuget-source
        run: dotnet nuget add source --username cmpnnt --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/cmpnnt/index.json"
      - name: Create Ctl Package
        id: create-ctl-package
        run: dotnet pack -c Release --nologo -p:PackageVersion=${{ needs.get_changelog_versions.outputs.ctl-version-number }} Cmpnnt.Pia.Ctl/Cmpnnt.Pia.Ctl.csproj
      - name: Push Ctl Package to Nuget
        id: push-ctl-package
        run: dotnet nuget push 'Cmpnnt.Pia.Ctl/bin/Release/Cmpnnt.Pia.Ctl.${{ runner.os }}.${{ needs.get_changelog_versions.outputs.ctl-version-number }}.nupkg' --api-key ${{ secrets.GITHUB_TOKEN }} --source "github"
  publish_di_package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    needs: [get_changelog_versions, get_published_packages_versions]
    if: needs.get_changelog_versions.outputs.di-version-number != needs.get_published_packages_versions.outputs.di-package-version
    steps:
      - uses: actions/checkout@v4
      - name: Add Github Nuget Source
        id: add-github-nuget-source
        run: dotnet nuget add source --username cmpnnt --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/cmpnnt/index.json"
      - name: Create DI Package
        id: create-di-package
        run: dotnet pack -c Release --nologo -p:PackageVersion=${{ needs.get_changelog_versions.outputs.di-version-number }} Cmpnnt.Pia.DependencyInjection/Cmpnnt.Pia.DependencyInjection.csproj
      - name: Push DI Package to Nuget
        id: push-di-package
        run: dotnet nuget push 'Cmpnnt.Pia.DependencyInjection/bin/Release/Cmpnnt.Pia.DependencyInjection.${{ runner.os }}.${{ needs.get_changelog_versions.outputs.di-version-number }}.nupkg' --api-key ${{ secrets.GITHUB_TOKEN }} --source "github"
        

# TODO: the DI package should not be compiled per OS. It should reference the ctl meta package that has the conditional logic.
# TODO: remove github nuget sources and replace with nuget.org
# TODO: change workflow triggers. PR/Merge should trigger changelog. Changelog should trigger both documentation and publish workflows
# TODO: make public and publish documentation to github page
# TODO: add linux tests to test workflow
  
# TODO: determine a way to automatically update the relevant changelogs when conventional commits are added to any given package
